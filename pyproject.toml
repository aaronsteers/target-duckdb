[tool.poetry]
name = "target-duckdb"
version = "0.4.0"
description = "A Singer tap and target for DuckDB, built with the Meltano SDK."
authors = ["Meltano"]
license = "Apache 2.0"

[tool.poetry.dependencies]
python = ">=3.7.1,<3.11"
duckdb = "0.7.1"
duckdb-engine = "0.7.0"

# inflection = '>=0.3.1'
# singer-python = '>=5.0.12'
# sqlalchemy = '==1.3.0'

# singer-sdk = {path = "../sdk", develop = true}
singer-sdk = "^0.22.1"

[tool.poetry.dev-dependencies]
pytest = "^6.1.2"
freezegun = "^1.1.0"
flake8 = "^3.9.2"
flake8-bugbear = "^21.9.1"
black = "^21.9b0"
mypy = "^0.920"
tox = "^3.24.5"
isort = "^5.10.1"
pylint = "^2.13.9"
pytest-cov = "^3.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
# CLI declarations
target-duckdb = 'target_duckdb:DuckDBTarget.cli'
tap-duckdb = 'target_duckdb:DuckDBTap.cli'

[tool.pytest.ini_options]
testpaths = ['target_duckdb', 'tests']

[tool.ruff]
ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in class method
    "N818",    # Exception name should be named with an Error suffix
]
line-length = 88
select = [
    "F",    # Pyflakes
    "E",    # pycodestyle (error)
    "W",    # pycodestyle (warning)
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle/flake8-docstrings
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimezs
    "T10",  # flake8-debugger
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PGH",  # pygrep-hooks
    "RUF",  # ruff
]
# src = ["samples", "singer_sdk", "tests"]
# target-version = "py37"

[tool.ruff.per-file-ignores]
# "docs/conf.py" = [
#     "D",      # pydocstyle/flake8-docstrings
#     "I002",   # isort: missing-required-import
#     "INP001", # flake8-no-pep420: implicit-namespace-package
# ]
# "noxfile.py" = ["ANN"]
# "tests/*" = ["ANN", "D1", "D2", "S101"]
# # Disabled some checks in samples code
# "samples/*" = ["ANN", "D"]
# # Don't require docstrings conventions or type annotations in private modules
# "singer_sdk/helpers/_*.py" = ["ANN", "D105"]
# # Templates support a generic resource of type Any.
# "singer_sdk/testing/*.py" = ["S101"]
# "singer_sdk/testing/templates.py" = ["ANN401"]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.isort]
known-first-party = ["singer_sdk", "samples", "tests"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.pydocstyle]
convention = "google"
